@using System.Linq.Expressions
@inject NavigationManager NavigationManager
@inject ChartBoxValuesService ChartBoxValuesService

<div class="row">
    <InputFile OnChange="@OnInputFileChange" multiple webkitdirectory />
    @* <InputFile OnChange="@OnInputFileChangeBaseLineOne" multiple webkitdirectory /> *@
    @* <InputFile OnChange="@OnInputFileChangeBaseLineTwo" multiple webkitdirectory /> *@
    <input type="text" id="ctrl" @bind-value="sucessType" />
    <input type="text" id="ctrl" @bind-value="clientType" />
    <input type="text" id="ctrl" @bind-value="system" />
    <button @onclick="Generate">Gerar</button>
</div>
@if (!loading && results.Any())
{
    <div class="row">
        <div class="col-lg-12 control-section">
            <SfChart @ref="@ChartObj" Title="@name">
                <ChartEvents Load="ChartLoad" />
                <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                <ChartPrimaryXAxis EdgeLabelPlacement="EdgeLabelPlacement.Shift" LabelIntersectAction="LabelIntersectAction.Trim" ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
                    @*<ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>*@
                </ChartPrimaryXAxis>
                <ChartSeriesCollection>
                    @foreach (var item in results)
                    {
                        <ChartSeries DataSource="@item.Value.ToArray()" XName="x" YName="y" Name="@item.Key" BoxPlotMode="@BoxPlot" Close="y" ShowMean="@Mean" Type="ChartSeriesType.BoxAndWhisker">
                            <ChartMarker Visible="false" Height="10" Width="10"></ChartMarker>
                        </ChartSeries>
                    }
                </ChartSeriesCollection>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            </SfChart>
        </div>
    </div>
}

@code{
    [Parameter]
    public Func<IFileListEntry[], IFileListEntry[], IFileListEntry[], string, Task<Dictionary<string, List<BoxandWhiskerData>>>> generate { get; set; }
    [Parameter]
    public string name { get; set; }

    bool loading;
    IFileListEntry[] files = new List<FileListEntryImpl>().ToArray();
    IFileListEntry[] baseLineOne = new List<FileListEntryImpl>().ToArray();
    IFileListEntry[] baseLineTwo = new List<FileListEntryImpl>().ToArray();
    string sucessType = "50_SUCESSO";
    string clientType = "[1];[25];[50];[100]";
    string system = "DotNet";
    Dictionary<string, List<BoxandWhiskerData>> results = new Dictionary<string, List<BoxandWhiskerData>>();


    SfChart ChartObj;
    public bool Mean = false;
    BoxPlotMode BoxPlot = BoxPlotMode.Normal;
    public void ChangeMode(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        this.BoxPlot = (BoxPlotMode)Enum.Parse(typeof(BoxPlotMode), args.Value.ToString(), true);
    }
    private void IsChecked(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        Mean = args.Checked;
        ChartObj.Refresh();
    }
    private void ChangeType(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        this.BoxPlot = (BoxPlotMode)Enum.Parse(typeof(BoxPlotMode), args.Value.ToString(), true);
        StateHasChanged();
    }
    public List<BoxandWhiskerData> AverageClientModuleChart = new List<BoxandWhiskerData>();
    public List<BoxandWhiskerData> AverageModuleServiceChart = new List<BoxandWhiskerData>();

    string CurrentUri;

    private async Task OnInputFileChange(IFileListEntry[] e) => files = e;
    private async Task OnInputFileChangeBaseLineOne(IFileListEntry[] e) => baseLineOne = e;
    private async Task OnInputFileChangeBaseLineTwo(IFileListEntry[] e) => baseLineTwo = e;

    private async Task Generate(MouseEventArgs e)
    {
        try
        {
            loading = true;
            var fileListEntries = files.Where(x => x.RelativePath.Contains(sucessType)).ToArray();
            fileListEntries = fileListEntries.Where(x => clientType.Split(";").Any(y => x.RelativePath.Contains(y))).ToArray();

            results = await generate(fileListEntries, baseLineOne, baseLineTwo, system);
            // results = await ChartBoxValuesService.GetClientToModulePercentualErrorByPath(files, system);
            StateHasChanged();
            loading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            loading = false;
        }
    }

    private async Task Changed(ChangeEventArgs e)
    {
        Console.WriteLine(e);
    }

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        Console.WriteLine(files);
        StateHasChanged();
    }

    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}